{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    slug: {\n      type: 'string',\n      description: 'The slug of the post',\n      required: true,\n    },\n    excerpt: {\n      type: 'string',\n      description: 'The excerpt of the post',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      description: 'SEO description',\n      required: true,\n    },\n    publishedAt: {\n      type: 'date',\n      description: 'The date the post was published',\n      required: true,\n    },\n    updatedAt: {\n      type: 'date',\n      description: 'The date the post was last updated',\n      required: false,\n    },\n    featuredImage: {\n      type: 'string',\n      description: 'The featured image URL',\n      required: true,\n    },\n    featuredImageAlt: {\n      type: 'string',\n      description: 'Alt text for featured image',\n      required: true,\n    },\n    author: {\n      type: 'string',\n      description: 'The author of the post',\n      required: true,\n    },\n    category: {\n      type: 'string',\n      description: 'The category of the post',\n      required: true,\n    },\n    categorySlug: {\n      type: 'string',\n      description: 'The category slug',\n      required: true,\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Tags for the post',\n      required: false,\n    },\n    featured: {\n      type: 'boolean',\n      description: 'Whether the post is featured',\n      required: false,\n      default: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/blog/${post.slug}`,\n    },\n    categoryUrl: {\n      type: 'string',\n      resolve: (post) => `/blog/${post.categorySlug}`,\n    },\n    readingTime: {\n      type: 'number',\n      resolve: (post) => {\n        const wordsPerMinute = 200\n        const wordCount = post.body.raw.split(/\\s+/).length\n        return Math.ceil(wordCount / wordsPerMinute)\n      },\n    },\n  },\n}))\n\nexport const Category = defineDocumentType(() => ({\n  name: 'Category',\n  filePathPattern: `categories/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    name: {\n      type: 'string',\n      description: 'The name of the category',\n      required: true,\n    },\n    slug: {\n      type: 'string',\n      description: 'The slug of the category',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      description: 'The description of the category',\n      required: true,\n    },\n    heroImage: {\n      type: 'string',\n      description: 'The hero image URL',\n      required: true,\n    },\n    heroImageAlt: {\n      type: 'string',\n      description: 'Alt text for hero image',\n      required: true,\n    },\n    featured: {\n      type: 'boolean',\n      description: 'Whether the category is featured',\n      required: false,\n      default: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (category) => `/blog/${category.slug}`,\n    },\n  },\n}))\n\nexport const Business = defineDocumentType(() => ({\n  name: 'Business',\n  filePathPattern: `businesses/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    name: {\n      type: 'string',\n      description: 'The name of the business',\n      required: true,\n    },\n    slug: {\n      type: 'string',\n      description: 'The slug of the business',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      description: 'Business description',\n      required: true,\n    },\n    category: {\n      type: 'string',\n      description: 'Business category',\n      required: true,\n    },\n    city: {\n      type: 'string',\n      description: 'City',\n      required: true,\n    },\n    state: {\n      type: 'string',\n      description: 'State',\n      required: true,\n    },\n    phone: {\n      type: 'string',\n      description: 'Phone number',\n      required: false,\n    },\n    website: {\n      type: 'string',\n      description: 'Website URL',\n      required: false,\n    },\n    services: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Services offered',\n      required: true,\n    },\n    logo: {\n      type: 'string',\n      description: 'Business logo URL',\n      required: false,\n    },\n    verified: {\n      type: 'boolean',\n      description: 'Whether the business is verified',\n      required: false,\n      default: false,\n    },\n    featured: {\n      type: 'boolean',\n      description: 'Whether the business is featured',\n      required: false,\n      default: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (business) => `/businesses/${business.slug}`,\n    },\n    categoryUrl: {\n      type: 'string',\n      resolve: (business) => `/businesses/category/${business.category.toLowerCase().replace(/\\s+/g, '-')}`,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post, Category, Business],\n})"],
  "mappings": "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",
  "names": []
}
